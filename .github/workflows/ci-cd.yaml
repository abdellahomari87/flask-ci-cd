name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
  
    - name: Run flake8
      run: |
        flake8 app.py

    - name: Run tests
      run: |
        pytest
        
  trivy:
    name: Trivy Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Install Trivy
      run: |
        sudo apt-get update
        sudo apt-get install -y wget
        wget https://github.com/aquasecurity/trivy/releases/download/v0.64.1/trivy_0.64.1_Linux-64bit.deb
        sudo dpkg -i trivy_0.64.1_Linux-64bit.deb

    - name: Scan Python dependencies
      run: trivy fs --exit-code 0 --severity HIGH,CRITICAL .

    - name: Trivy Image Scan
      run: |
        docker build -t flask-ci-cd .
        trivy image --exit-code 0 --severity HIGH,CRITICAL flask-ci-cd

    - name: Download HTML report template
      run: |
        curl -sSL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/html.tpl -o trivy-html.tpl

    - name: VÃ©rification que le template existe
      run: ls -l trivy-html.tpl

    - name: Build Docker image
      run: docker build -t flask-ci-cd .
  
    - name: Trivy Image Scan with HTML report
      run: |
        trivy image flask-ci-cd \
          --severity HIGH,CRITICAL \
          --format template \
          --template "@trivy-html.tpl" \
          -o trivy-report.html

    - name: Upload Trivy HTML Report
      uses: actions/upload-artifact@v4
      with:
        name: trivy-report
        path: trivy-report.html

  owasp-dependency-check:
      name: OWASP Dependency Check
      runs-on: ubuntu-latest
      needs: build-and-test

      env:
        NVD_API_KEY: ${{ secrets.NVD_API_KEY }}

      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Java (required for dependency-check)
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin' 

      - name: Download OWASP Dependency-Check
        run: |
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v9.2.0/dependency-check-9.2.0-release.zip
          unzip dependency-check-9.2.0-release.zip
          mv dependency-check dependency-check-dir

      - name: Run OWASP Dependency-Check
        run: |
          mkdir -p owasp-reports
          ./dependency-check-dir/bin/dependency-check.sh \
          --project "flask-ci-cd" \
          --scan . \
          --format HTML \
          --out owasp-reports

      - name: Upload OWASP HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-report
          path: owasp-reports/dependency-check-report.html
      
  docker:
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Log in to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:latest

  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@v2
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.projectKey=abdellahomari87_flask-ci-cd
          -Dsonar.organization=abdellahomari87
          -Dsonar.host.url=https://sonarcloud.io

